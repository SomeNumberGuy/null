import matplotlib.pyplot as plt
import numpy as np
import logging

class CustomLogger:
    def __init__(self, name="default", log_level=logging.INFO):
        self.logger = logging.getLogger(name)
        self.logger.setLevel(log_level)

        if not self.logger.hasHandlers():
            formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
            handler = logging.StreamHandler()
            handler.setFormatter(formatter)
            self.logger.addHandler(handler)

    def log(self, message):
        self.logger.info(message)

# Example usage:
logger = CustomLogger('my_logger', logging.INFO)  # Create a logger named 'my_logger' with INFO level

DRAW_PLOT = False

class BoundingBox:
    def __init__(self, x, y, w, h, class_id, probability=-1):
        self.x = x
        self.y = y
        self.w = w
        self.h = h
        self.class_id = class_id
        self.probability = probability
        self.used = False  # Initialize as unused

    def __str__(self):
        return f"({self.x}, {self.y}) - ({self.x+self.w}, {self.y+self.h}), Class: {self.class_id}, Probability: {self.probability:.2f}"

    def use(self):
        self.used = True

    def is_used(self):
        return self.used
    
    def xywh(self):
        return [self.x, self.y, self.w, self.h]
    
def calculate_iou(box1, box2):
    """
    Calculate Intersection over Union (IoU) of two bounding boxes.
    """
    x1_tl, y1_tl, w1, h1 = box1.xywh()
    x2_tl, y2_tl, w2, h2 = box2.xywh()

    x1_br, y1_br = x1_tl + w1, y1_tl + h1
    x2_br, y2_br = x2_tl + w2, y2_tl + h2

    x_overlap = max(0, min(x1_br, x2_br) - max(x1_tl, x2_tl))
    y_overlap = max(0, min(y1_br, y2_br) - max(y1_tl, y2_tl))
    intersection = x_overlap * y_overlap

    area1 = w1 * h1
    area2 = w2 * h2
    union = area1 + area2 - intersection

    iou = intersection / union if union > 0 else 0
    return iou

def voc_ap(rec, prec):
    """
    --- Official matlab code VOC2012---
    mrec=[0 ; rec ; 1];
    mpre=[0 ; prec ; 0];
    for i=numel(mpre)-1:-1:1
            mpre(i)=max(mpre(i),mpre(i+1));
    end
    i=find(mrec(2:end)~=mrec(1:end-1))+1;
    ap=sum((mrec(i)-mrec(i-1)).*mpre(i));
    """
    rec.insert(0, 0.0) # insert 0.0 at begining of list
    rec.append(1.0) # insert 1.0 at end of list
    mrec = rec[:]
    prec.insert(0, 0.0) # insert 0.0 at begining of list
    prec.append(0.0) # insert 0.0 at end of list
    mpre = prec[:]
    """
     This part makes the precision monotonically decreasing
        (goes from the end to the beginning)
        matlab: for i=numel(mpre)-1:-1:1
                    mpre(i)=max(mpre(i),mpre(i+1));
    """
    # matlab indexes start in 1 but python in 0, so I have to do:
    #     range(start=(len(mpre) - 2), end=0, step=-1)
    # also the python function range excludes the end, resulting in:
    #     range(start=(len(mpre) - 2), end=-1, step=-1)
    for i in range(len(mpre)-2, -1, -1):
        mpre[i] = max(mpre[i], mpre[i+1])
    """
     This part creates a list of indexes where the recall changes
        matlab: i=find(mrec(2:end)~=mrec(1:end-1))+1;
    """
    i_list = []
    for i in range(1, len(mrec)):
        if mrec[i] != mrec[i-1]:
            i_list.append(i) # if it was matlab would be i + 1
    """
     The Average Precision (AP) is the area under the curve
        (numerical integration)
        matlab: ap=sum((mrec(i)-mrec(i-1)).*mpre(i));
    """
    ap = 0.0
    for i in i_list:
        ap += ((mrec[i]-mrec[i-1])*mpre[i])
    return ap, mrec, mpre


def plot_bounding_boxes(ground_truth, predictions):
    """
    Plot bounding boxes for ground truth and predictions.
    """
    plt.figure(figsize=(8, 8))
    plt.title("Bounding Boxes")
    plt.imshow(np.zeros((400, 400, 3)))  # Creating an empty image for visualization
    
    # Plot ground truth boxes
    for box in ground_truth:
        x, y, w, h, class_id = box
        plt.gca().add_patch(plt.Rectangle((x, y), w, h, linewidth=5, edgecolor='b', facecolor='none'))

    # Plot predicted boxes
    for box in predictions:
        x, y, w, h, class_id, _ = box
        plt.gca().add_patch(plt.Rectangle((x, y), w, h, linewidth=1, edgecolor='r', facecolor='none'))

    plt.axis('off')
    plt.show()


def calculate_map(gt_classes, pred_boxes, gt_boxes, min_overlap=0.1):
    sum_AP = 0.0
    gt_counter_per_class = {}
    n_classes = len(gt_classes)
    class_map = [0 for _ in gt_classes]
    for gt in gt_boxes:
        if gt.class_id in gt_counter_per_class:
            gt_counter_per_class[gt.class_id] += 1
        else:
            gt_counter_per_class[gt.class_id] = 1
            
    count_true_positives = {}
    for class_index, class_name in enumerate(gt_classes):
        #print(f"-----\n{class_name}\n-----")
        count_true_positives[class_name] = 0
        nd = len(pred_boxes)
        tp = [0] * nd # creates an array of zeros of size nd
        fp = [0] * nd
        for idx, detection in enumerate(pred_boxes):
            iou_max = -1
            gt_match = -1
            bb = detection
            if bb.class_id != class_name:
                continue
            for gt_bb in gt_boxes:
                if gt_bb.class_id == class_name:
                    #print("class match")
                    iou = calculate_iou(gt_bb, bb)
                    if iou > iou_max:
                        iou_max = iou
                        gt_match = gt_bb
            #print(f"{gt_bb=} {bb=} {iou_max=}")

            if iou_max >= min_overlap:
                if True: #not bool(gt_match["used"]):
                    # true positive
                    tp[idx] = 1
                    #gt_match["used"] = True
                    count_true_positives[class_name] += 1
                else:
                    # false positive (multiple detection)
                    fp[idx] = 1
            else:
                # false positive
                fp[idx] = 1
        cumsum = 0
        #print(f"{tp=} {fp=}")
        for idx, val in enumerate(fp):
            fp[idx] += cumsum
            cumsum += val
        cumsum = 0
        for idx, val in enumerate(tp):
            tp[idx] += cumsum
            cumsum += val
        rec = tp[:]
        for idx, val in enumerate(tp):
            rec[idx] = float(tp[idx]) / gt_counter_per_class[class_name]
        prec = tp[:]
        for idx, val in enumerate(tp):
            prec[idx] = 1.0
            if (fp[idx] + tp[idx]) > 0:
                prec[idx] = float(tp[idx]) / (fp[idx] + tp[idx])
        #print(f"{tp=} {rec=} {prec=}")

        ap, mrec, mprec = voc_ap(rec[:], prec[:])
        sum_AP += ap
        class_map[class_index] = ap
        text = "{0:.2f}%".format(ap*100) + " = " + class_name + " AP " 

        if DRAW_PLOT:
            plt.plot(rec, prec, '-o')
            # add a new penultimate point to the list (mrec[-2], 0.0)
            # since the last line segment (and respective area) do not affect the AP value
            area_under_curve_x = mrec[:-1] + [mrec[-2]] + [mrec[-1]]
            area_under_curve_y = mprec[:-1] + [0.0] + [mprec[-1]]
            plt.fill_between(area_under_curve_x, 0, area_under_curve_y, alpha=0.2, edgecolor='r')
            fig = plt.gcf() 
            plt.title('class: ' + text)
            plt.xlabel('Recall')
            plt.ylabel('Precision')
            axes = plt.gca() 
            axes.set_xlim([0.0,1.0])
            axes.set_ylim([0.0,1.05])
            fig.savefig("pr-"+class_name + ".png")
            plt.cla() # clear axes for next plot

        #class_name + " AP = {0:.2f}%".format(ap*100)
        #print(text)
    #print("\n# mAP of all classes\n")
    mAP = sum_AP / n_classes
    text = "mAP = {0:.2f}%".format(mAP*100)
    #print(text)
    return mAP, class_map

def calculate_mean_avg_precision(gt_classes, gt_boxes, pred_boxes, iou_thresholds=[i / 1000.0 for i in range(500, 950, 1)]):
    avg_mAP = []
    avg_class_map = np.array([0.0 for _ in gt_classes])
    for threshold in iou_thresholds:
        avg_precisions = []
        avg_precision, class_map = calculate_map(gt_classes, pred_boxes, gt_boxes, threshold)
        avg_precisions.append(avg_precision)
        avg_mAP.append(avg_precisions)
        avg_class_map += np.true_divide(class_map, len(iou_thresholds))
    avg_mAP = np.mean(avg_mAP)
    #print(f"{avg_mAP=} {avg_class_map=}")
    return avg_mAP, avg_class_map

gt_boxes = [(100, 100, 50, 50, 'class1'), (200, 200, 50, 50, 'class2'), (300, 100, 50, 50, 'class2')]
gt_boxes = [BoundingBox(*x) for x in gt_boxes]
pred_boxes = [(100, 110, 50, 50, 'class1', 0.9), (200, 290, 50, 50, 'class2', 0.8),(300, 100, 50, 50, 'class2', 0.8)]
pred_boxes = [BoundingBox(*x) for x in pred_boxes]
gt_classes = ['class1', 'class2']
#plot_bounding_boxes(gt_boxes, pred_boxes)
calculate_map(gt_classes, pred_boxes, gt_boxes)

map_10 = calculate_map(gt_classes, pred_boxes, gt_boxes, 0.1)
map_50 = calculate_map(gt_classes, pred_boxes, gt_boxes, 0.5)
map_70 = calculate_map(gt_classes, pred_boxes, gt_boxes, 0.7)
map_5095 = calculate_mean_avg_precision(gt_classes, pred_boxes, gt_boxes)
logger.log(f"{map_10=}")
logger.log(f"{map_50=}")
logger.log(f"{map_70=}")
logger.log(f"{map_5095=}")
